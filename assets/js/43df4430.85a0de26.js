"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7752],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return b}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),s=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return o.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=s(t),b=r,f=d["".concat(c,".").concat(b)]||d[b]||p[b]||i;return t?o.createElement(f,l(l({ref:n},u),{},{components:t})):o.createElement(f,l({ref:n},u))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=d;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,l[1]=a;for(var s=2;s<i;s++)l[s]=t[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4482:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return s},assets:function(){return u},toc:function(){return p},default:function(){return b}});var o=t(7462),r=t(3366),i=(t(7294),t(3905)),l=["components"],a={},c="Zones",s={unversionedId:"ox_lib/Client/zones",id:"ox_lib/Client/zones",title:"Zones",description:"An alternative to PolyZone utilising glm.polygon.",source:"@site/docs/ox_lib/Client/zones.md",sourceDirName:"ox_lib/Client",slug:"/ox_lib/Client/zones",permalink:"/docs/ox_lib/Client/zones",editUrl:"https://github.com/overextended/overextended.github.io/tree/main/docs/ox_lib/Client/zones.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Vehicle Properties",permalink:"/docs/ox_lib/Client/vehicleProperties"},next:{title:"Permissions",permalink:"/docs/ox_lib/Server/acl"}},u={},p=[],d={toc:p};function b(e){var n=e.components,t=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"zones"},"Zones"),(0,i.kt)("p",null,"An alternative to PolyZone utilising ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gottfriedleibniz/lua/blob/luaglm/EXTENDED.md#polygon"},"glm.polygon"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"-- data: table\n    -- points: vector3[] all z values must match\n    -- thickness: number (optional), default 2\n    -- debug: bool (optional)\nlib.zones.poly(data)\n\n-- data: table\n    -- coords: vector3\n    -- size: vector3\n    -- rotation: number (optional), angle in degrees\n    -- debug: bool (optional)\nlib.zones.box(data)\n\n-- data: table\n    -- coords: vector3\n    -- radius: number (optional), default is 2\n    -- debug: bool (optional)\nlib.zones.sphere(data)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"function onEnter(self)\n    print('entered zone', self.id)\nend\n\nfunction onExit(self)\n    print('exited zone', self.id)\nend\n\nfunction inside(self)\n    print('you are inside zone ' .. self.id)\nend\n\nlocal poly = lib.zones.poly({\n    points = {\n        vec(413.8, -1026.1, 29),\n        vec(411.6, -1023.1, 29),\n        vec(412.2, -1018.0, 29),\n        vec(417.2, -1016.3, 29),\n        vec(422.3, -1020.0, 29),\n        vec(426.8, -1015.9, 29),\n        vec(431.8, -1013.0, 29),\n        vec(437.3, -1018.4, 29),\n        vec(432.4, -1027.2, 29),\n        vec(424.7, -1023.5, 29),\n        vec(420.0, -1030.2, 29),\n        vec(409.8, -1028.4, 29),\n    },\n  thickness = 2,\n  debug = true,\n  inside = inside,\n  onEnter = onEnter,\n  onExit = onExit\n})\n\nlocal sphere = lib.zones.sphere({\n    coords = vec3(442.5363, -1017.666, 28.65637),\n    radius = 1,\n    debug = true,\n    inside = inside,\n    onEnter = onEnter,\n    onExit = onExit\n})\n\nlocal box = lib.zones.box({\n    coords = vec3(442.5363, -1017.666, 28.65637),\n    size = vec3(1, 1, 1),\n    rotation = 45,\n    debug = true,\n    inside = insideZone,\n    onEnter = onEnter,\n    onExit = onExit\n})\n")))}b.isMDXComponent=!0}}]);